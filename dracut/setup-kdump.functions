# setup-kdump.functions
#
# (c) 2014, Petr Tesarik <ptesarik@suse.de>, SUSE LINUX Products GmbH
#
# Helper functions needed to set up networking in the kdump initrd.
#

#
# Paths and other configuration variables
#

FENCE_KDUMP_SEND=/usr/lib/fence_kdump_send

#
# Global variables
#

# Next network interface number
kdump_ifnum=0

# Extract the device name from a route
#
# Input:
#   output of "route show"
# Output:
#   device name (for each line of input)
function kdump_route2dev()						   # {{{
{
    sed -n 's/.* dev \([^ ]*\) *\(.* metric \([0-9]\+\)\)\?.*/0\3 \1/p' | \
	sort -n | cut -d' ' -f2 | head -1
}									   # }}}

# Get network manager id
#
# Output:
#   network manager identifier ("wicked" or "NetworkManager")
function kdump_net_manager()						   # {{{
{
    if [ -z "$kdump_cached_net_manager" ] ; then
	local _id
	_id=$(systemctl show --property=Id network.service)
	_id="${_id#Id=}"
	kdump_cached_net_manager="${_id%.service}"
    fi
    echo "$kdump_cached_net_manager"
}									   # }}}

#
# Get a wicked configuration value for a device
#
# Parameters:
#   1) ifname  network interface name
#   *) conf    wicked xpath expression(s) under /interface
# Output:
#   configuration value
function kdump_wicked_conf()						   # {{{
{
    local ifname="$1"
    shift
    wicked show-config | \
	wicked xpath --reference "/interface[name='$ifname']" "$@"
}									   # }}}

#
# Determine the default network device.
#
# Output:
#   ifname  default network interface name (or empty if none)
function kdump_default_netdev()						   # {{{
{
    local ifname
    local inffile="/etc/install.inf"

    # check current default routes
    ifname=$(ip route show 0/0 | kdump_route2dev)
    if [ -z "$ifname" ] ; then
	ifname=$(ip -6 route show ::/0 | kdump_route2dev)
    fi

    # if not found, get info from install.inf
    if [ -z "$ifname" -a -f "$inffile" ] ; then
	local dev hwaddr hwaddr2
	eval $( sed -ne '
		s/^Netdevice: \(.*\)/ifname=\1/p;
		s/HWAddr: \(.*\)/hwaddr=\1/p' \
	    "$inffile" )
        if [ -n "$hwaddr" ] ; then
            for dev in /sys/class/net/* ; do
                read hwaddr2 < "$dev"/address
                if [ "$hwaddr" = "$hwaddr2" ] ; then
                    ifname="${dev##*/}"
                fi
            done
        fi
    fi
    echo "$ifname"
}									   # }}}

#
# Determine the default network mode of a given device.
#
# Parameters:
#   1) ifname  network interface name
# Output:
#   mode    initialization mode ("static" or "dhcp")
function kdump_netdev_mode()						   # {{{
{
    local ifname="$1"
    local inffile="/etc/install.inf"
    local BOOTPROTO

    # get mode using wicked if possible
    if [ "$(kdump_net_manager)" = "wicked" ]
    then
	if [ "$(kdump_wicked_conf "$ifname" "%{name}")" = "$ifname" ]
	then
	    local dhcpv4 dhcpv6
	    eval $( kdump_wicked_conf "$ifname" \
		    "dhcpv4=%{ipv4:dhcp/enabled}" \
		    "dhcpv6=%{ipv6:dhcp/enabled}" )
	    if [ "$dhcpv4" = true -o "$dhcpv6" = true ] ; then
		BOOTPROTO=dhcp
	    else
		BOOTPROTO=static
	    fi
	fi
    fi

    # get mode from config files
    if [ -z "$BOOTPROTO" ] ; then
	local cfg=/etc/sysconfig/network/ifcfg-"$ifname"
	if [ -f "$cfg" ] ; then
	    eval $(grep '^[[:space:]]*BOOTPROTO=' "$cfg")
	fi
    fi

    # try install.conf
    if [ -z "$BOOTPROTO" ] ; then
	eval $( sed -ne 's/^NetConfig: \(.*\)/BOOTPROTO=\1/p;' \
	    "$inffile" )
    fi

    # if not found, look if there is a dhcp daemon for the interface
    if [ -z "$BOOTPROTO" ] ; then
        if [ -n "$(ps -C dhclient,dhclient6,dhcpcd -o cmd= |
		    sed -n '/.* \('"$ifname"'\)\( .*\|$\)/p' )" ] ; then
            BOOTPROTO=dhcp
        else
            BOOTPROTO=static
        fi
    fi

    echo "$BOOTPROTO"
}									   # }}}

#
# Get the interface kind
#
# Parameters:
#   1) iface  device name
# Output:
#   interface kind (IFLA_INFO_KIND)
function kdump_ifkind()							   # {{{
{
    local if="$1"

    # ovs-system is special, because it's recognized by its name
    if [ "$if" = "ovs-system" ]
    then
	echo ovs-system

    # get kind using wicked if possible
    elif [ "$(kdump_net_manager)" = "wicked" ]
    then
	local -a elems=(
	    infiniband
	    infiniband:child
	    bond
	    team
	    ovs-bridge
	    bridge
	    vlan
	    macvlan
	    macvtap
	    dummy
	    wireless
	    tun
	    tap
	    ipip
	    gre
	    sit
	)
	local elem opt var
	for elem in "${elems[@]}"
	do
	    opt="$opt;${elem//[-:]/_}=%{$elem or false}"
	done

	var="${elems[@]}"
	var="${var//[-:]/_}"
	local $var
	eval $( kdump_wicked_conf "$if" "${opt#;}" )

	for elem in "${elems[@]}"
	do
	    var="${elem//[-:]/_}"
	    if [ "${!var}" = true ]
	    then
		echo "$elem"
		break
	    fi
	done

    # fall back to reading the current state via netlink
    else
	ip -d link show "$1" | sed -n '3{s/^ *\([^ ]*\).*/\1/;s/\(.*_slave$\|altname\)//;p}'
    fi
}									   # }}}

#
# Get a list of slave interfaces
#
# Parameters:
#   1) iface  master device name
# Output:
#   list of slave interfaces
function kdump_list_slaves()						   # {{{
{
    local syspath="/sys/class/net/$1/lower_"
    local lower=$(shopt -s nullglob ; echo ${syspath}*)
    local if
    for if in $lower
    do
	echo -n " ${if#$syspath}"
    done
}									   # }}}

#
# Get the bridge configuration options
#
# Parameters:
#   1) iface  device name
# Output variables:
#   kdump_netif  corresponding bridge= initrd parameter added
#   kdump_iface  device name in initrd
#   kdump_kmods  additional kernel modules updated
function kdump_bridge_config()						   # {{{
{
    local bridge="$1"
    local if slaves
    local curslaves

    # use wicked to read VLAN configuration, if possible
    if [ "$(kdump_net_manager)" = "wicked" ]
    then
	curslaves=$( kdump_wicked_conf "$bridge" "%{bridge/ports/port/device}" )
    fi
    # fall back to current configuration
    if [ -z "$curslaves" ]
    then
	curslaves=$( kdump_list_slaves "$bridge" )
    fi

    for if in $curslaves
    do
	kdump_ifname_config "$if" || continue
	slaves="$slaves $kdump_iface"
    done
    kdump_iface="$bridge"
    [ -n "$slaves" ] || return 1

    kdump_kmods="$kdump_kmods bridge"
    slaves="${slaves# }"
    kdump_netif="$kdump_netif bridge=$kdump_iface:${slaves// /,}"
}									   # }}}

#
# Get the bond configuration options
#
# Parameters:
#   1) iface  device name
# Output variables:
#   kdump_netif  corresponding bond= initrd parameter added
#   kdump_iface  device name in initrd
#   kdump_kmods  additional kernel modules updated
function kdump_bond_config()						   # {{{
{
    local bond="$1"
    local if slaves
    local curslaves opts

    # use wicked to read bonding settings, if possible
    if [ "$(kdump_net_manager)" = "wicked" ]
    then
	local -a optvars=(
		mode arp_interval arp_validate arp_all_targets arp_ip_target
		miimon updelay downdelay use_carrier primary active_slave
		xmit_hash_policy packets_per_slave tlb_dynamic_lb lacp_rate
		ad_select min_links primary_reselect fail_over_mac num_grat_arp
		num_unsol_na lp_interval resend_igmp all_slaves_active
	)
	eval $( kdump_wicked_conf "$bond" \
		"curslaves=\"\$curslaves %{bond/slaves/slave/device}\"" \
		"mode=%{bond/mode}" \
		"arp_interval=%{bond/arpmon/interval}" \
		"arp_validate=%{bond/arpmon/validate}" \
		"arp_all_targets=%{bond/arpmon/validate-targets}" \
		"arp_ip_target=%{bond/arpmon/targets/ipv4-address}" \
		"miimon=%{bond/miimon/frequency}" \
		"updelay=%{bond/miimon/updelay}" \
		"downdelay=%{bond/miimon/downdelay}" \
		"use_carrier=%{bond/miimon/carrier-detect}" \
		"primary=%{bond/slaves/slave[primary=true]/device}" \
		"active_slave=%{bond/slaves/slave[active=true]/device}" \
		"xmit_hash_policy=%{bond/xmit-hash-policy}" \
		"packets_per_slave=%{bond/packets-per-slave}" \
		"tlb_dynamic_lb=%{bond/tlb-dynamic-lb}" \
		"lacp_rate=%{bond/lacp-rate}" \
		"ad_select=%{bond/ad-select}" \
		"min_links=%{bond/min-links}" \
		"primary_reselect=%{bond/primary-reselect}" \
		"fail_over_mac=%{bond/fail-over-mac}" \
		"num_grat_arp=%{bond/num-grat-arp}" \
		"num_unsol_na=%{bond/num-unsol-na}" \
		"lp_interval=%{bond/lp-interval}" \
		"resend_igmp=%{bond/resend-igmp}" \
		"all_slaves_active=%{bond/all-slaves-active}"
	      )

	# translate incompatible option values
	case "$mode" in
	    ieee802-3ad) mode="802.3ad" ;;
	esac
	case "$use_carrier" in
	    ioctl)	use_carrier=0 ;;
	    netif)	use_carrier=1  ;;
	esac
	case "$xmit_hash_policy" in
	    layer23)	xmit_hash_policy="layer2+3" ;;
	    layer34)	xmit_hash_policy="layer3+4" ;;
	    encap23)	xmit_hash_policy="encap2+3" ;;
	    encap34)	xmit_hash_policy="encap3+4" ;;
	esac
	case "$tlb_dynamic_lb" in
	    false)	tlb_dynamic_lb=0 ;;
	    true)	tlb_dynamic_lb=1  ;;
	esac
	case "$all_slaves_active" in
	    false)	all_slaves_active=0 ;;
	    true)	all_slaves_active=1 ;;
	esac

	local var
	for var in "${optvars[@]}"
	do
	    [ -n "${!var}" ] && opts="$opts,${var}=${!var}"
	done
    fi

    # fall back to current configuration
    if [ -z "$curslaves" ]
    then
	curslaves=$(kdump_list_slaves "$bond")

	local ro_keys=(
	    ad_actor_key
	    ad_aggregator
	    ad_num_ports
	    ad_partner_key
	    ad_partner_mac
	)
	local ro_sed="s/,\(${ro_keys[@]}\)=[^,]*//g"
	ro_sed="${ro_sed// /\|}"

	opts=$(ip -d link show "$bond" | \
	    sed -n '3{s/^ *bond//;s/ \([^ ]*\) \([^ ]*\)/,\1=\2/g;'"$ro_sed"';p}')
    fi

    for if in $curslaves
    do
	kdump_ifname_config "$if" || continue
	slaves="$slaves $kdump_iface"
    done
    kdump_iface="$bond"
    [ -n "$slaves" ] || return 1
    slaves="${slaves# }"

    kdump_kmods="$kdump_kmods bonding"
    kdump_netif="$kdump_netif bond=$kdump_iface:${slaves// /,}:${opts#,}"
}									   # }}}

#
# Extract the VLAN tag ID from ip link output
#
# Input:
#   output of "ip -d link show"
# Output:
#   VLAN tag (or empty)
function kdump_link2vlan()                                                # {{{{
{
    sed -n '/^ *vlan /s/.* id \([0-9]\+\).*/\1/p'
}                                                                         # }}}

#
# Get VLAN configuration options
#
# Parameters:
#   1) iface  device name
# Output variables:
#   kdump_netif  corresponding vlan= initrd parameter added
#   kdump_iface  device name in initrd
#   kdump_kmods  additional kernel modules updated
#
# Because of dracut limitations for vlan interface naming, the initrd
# interface name may be different from the original name.
function kdump_vlan_config()						   # {{{
{
    local if="$1"
    local vid

    # use wicked to read VLAN configuration, if possible
    if [ "$(kdump_net_manager)" = "wicked" ]
    then
	eval $( kdump_wicked_conf "$if" \
		"vid=%{vlan/tag}; if=%{vlan/device}" )
    fi

    # fall back to sysfs
    if [ -z "$vid" ]
    then
	vid=$(ip -d link show "$if" | kdump_link2vlan)
	local slaves=$(kdump_list_slaves "$if")
	if="${slaves# }"
    fi

    kdump_kmods="$kdump_kmods 8021q"
    kdump_ifname_config "$if"
    kdump_iface="$if.$vid"
    kdump_netif="$kdump_netif vlan=$kdump_iface:$if"
}									   # }}}

# Get the ifname parameter for a given device
#
# Parameters:
#   1) device  device name
# Output:
#   permanent hardware address
function kdump_hwaddr()							   # {{{
{
    local _iface="$1"
    local _type=$(<"/sys/class/net/$_iface/addr_assign_type")
    if [ "$_type" -eq 0 ]
    then
	cat "/sys/class/net/$_iface/address"
    else
	ethtool -P "$_iface" | sed 's/^[^:]*: *//'
    fi
}									   # }}}

# Get the ifname parameter for a given device
#
# Parameters:
#   1) device  device name
# Output variables:
#   kdump_netif  corresponding ifname= initrd parameter added
#   kdump_iface  device name in initrd
#   kdump_kmods  additional kernel modules updated
#   kdump_ifmap  hardware network interface map updated
function kdump_ifname_config()						   # {{{
{
        local _iface="$1"
        local _ifkind=$(kdump_ifkind "$_iface")

	case "$_ifkind" in
		"" | infiniband)
			kdump_iface="kdump$kdump_ifnum"
			kdump_ifnum=$(( $kdump_ifnum + 1 ))
			kdump_ifmap="$kdump_ifmap $_iface:$kdump_iface"

			local _drv=$( readlink "/sys/class/net/$_iface/device/driver" )
			case "$_drv" in
				*/qeth)
					;;
				*)
					local hwaddr=$(kdump_hwaddr "$_iface")
					[ -n "$hwaddr" ] && kdump_netif="$kdump_netif ifname=$kdump_iface:$hwaddr"
					;;
			esac

			local mod="/sys/class/net/$_iface/device/driver/module"
			if [ -L "$mod" ]
			then
				mod=$(readlink "$mod")
				kdump_kmods="$kdump_kmods ${mod##*/}"
			fi
			;;
		bridge)
			kdump_bridge_config "$_iface"
			;;
		bond)
			kdump_bond_config "$_iface"
			;;
		vlan)
			kdump_vlan_config "$_iface"
			;;
		*)
			return 1
			;;
	esac
}									   # }}}

#
# Convert a CIDR prefix to IPv4 netmask
#
# Parameters:
#   1) prefix the CIDR prefix (default: 32)
# Output:
#   Corresponding netmask
kdump_prefix2netmask() {						   # {{{
    local prefix="${1:-32}"
    local netmask=
    local i
    for i in a b c d
    do
	netmask="$netmask.$(( 255 - (255 >> prefix) ))"
	if [ "$prefix" -gt 8 ] ; then
	    prefix=$(( prefix - 8 ))
	else
	    prefix=0
	fi
    done
    echo "${netmask:1}"
}									   # }}}

#
# Get the IPv4 rd.route= parameters for a given device
#
# Parameters:
#   1) iface   current interface name
#   2) bootif  interface name in initrd
# Output:
#   string that can be used for the rd.route= initrd parameter
function kdump_ip_routes()						   # {{{
{
    local _iface="$1"
    local _bootif="$2"

    # remove default routes
    local _rmdefault='/^default /d'
    # transform the output of "ip route" into rd.route=
    local _xform='s/\([^ ]*\)\( via \([^ ]*\)\)\?.*/rd.route=\1:\3/'
    # add interface name and print
    local _addintf="s/\$/:${_bootif}/p"

    # get configured routes using wicked if possible
    if [ "$(kdump_net_manager)" = "wicked" ]
    then
	wicked show-config | \
	    wicked xpath --reference \
		   "/interface[name='$_iface']/ipv4:static/route" \
		   "rd.route=%{destination}:%{?nexthop/gateway}:$_bootif" \
		   2>/dev/null
    else
        ip route show dev "$_iface" proto boot | \
	    sed -ne "$_rmdefault;$_xform;$_addintf"
        ip route show dev "$_iface" proto static | \
	    sed -ne "$_rmdefault;$_xform;$_addintf"
    fi
}									   # }}}

#
# Get the IPv4 ip= parameter for a given device
#
# Parameters:
#   1) iface   current interface name
#   2) bootif  interface name in initrd
# Output:
#   ip configuration string that can be used for the ip= initrd parameter
function kdump_ip_config()						   # {{{
{
    local iface="$1"
    local bootif="$2"
    local ipaddr peeraddr gwaddr netmask hostname
    local family cidr rest
    local prefix
    local routes r
    while read family cidr rest
    do
	[ "$family" = "inet" ] || continue

	ipaddr="${cidr%/*}"
	prefix="${cidr:${#ipaddr}}"
	[ "$prefix" = "/32" ] && continue

	set -- $rest

        if [ "$1" == "peer" ] ; then
	    cidr="$2"
            peeraddr=${cidr%/*}
	    prefix="${cidr:${#peeraddr}}"
	    shift 2
        fi
	netmask=$( kdump_prefix2netmask "${prefix:1}" )

    done < <(ip -4 address show dev "$iface")

    gwaddr=$(ip route show 0/0 | sed -n 's/.* via \([^ ]*\).*/\1/p')
    hostname=$(hostname)

    if [ -n "$ipaddr" ] ; then
        echo "ip=$ipaddr:$peeraddr:$gwaddr:$netmask:$hostname:$bootif:none"
	kdump_ip_routes "$iface" "$bootif"
    fi
}									   # }}}

#
# Get the IPv6 rd.route= parameters for a given device
#
# Parameters:
#   1) iface   current interface name
#   2) bootif  interface name in initrd
# Output:
#   string that can be used for the rd.route= initrd parameter
function kdump_ip6_routes()						   # {{{
{
    local _iface="$1"
    local _bootif="$2"

    # remove default routes
    local _rmdefault='/^default /d'
    # transform the output of "ip route" into rd.route=
    local _xform='s/\([^ ]*\)\( via \([^ ]*\)\)\?.*/rd.route=[\1]:[\3]/'
    # remove gateway if empty
    local _rmgw='s/\[\]$//'
    # add interface name and print
    local _addintf="s/\$/:${_bootif}/p"

    # get configured routes using wicked if possible
    if [ "$(kdump_net_manager)" = "wicked" ]
    then
	wicked show-config | \
	    wicked xpath \
		   --reference "/interface[name='$_iface']/ipv6:static/route" \
		   "rd.route=[%{destination}]:[%{?nexthop/gateway}]" \
		   2>/dev/null | \
	    sed -ne "$_rmgw;$_addintf"
    else
        ip -6 route show dev "$_iface" proto boot | \
	    sed -ne "$_rmdefault;$_xform;$_rmgw;$_addintf"
        ip -6 route show dev "$_iface" proto static | \
	    sed -ne "$_rmdefault;$_xform;$_rmgw;$_addintf"
    fi
}									   # }}}

#
# Get the IPv6 ip= parameter for a given device
#
# Parameters:
#   1) iface   current interface name
#   2) bootif  interface name in initrd
# Output:
#   ip configuration string that can be used for the ip= initrd parameter
function kdump_ip6_config()						   # {{{
{
    local iface="$1"
    local bootif="$2"
    local ipaddr peeraddr gwaddr netmask hostname
    local family cidr rest prefix
    local routes r

    hostname=$(hostname)
    gwaddr=$(ip -6 route show ::/0 | sed -n 's/.* via \([^ ]*\).*/[\1]/p')

    while read family cidr rest
    do
	[ "$family" = "inet6" ] || continue

	ipaddr="${cidr%/*}"
	prefix="${cidr:${#ipaddr}}"
	netmask="${prefix:1}"
	ipaddr="[$ipaddr]"
	set -- $rest

        if [ "$1" == "peer" ] ; then
	    peeraddr="${2%/*}"
	    prefix="${2:${#peeraddr}}"
	    peeraddr="[$peeraddr]"
	else
	    peeraddr=
        fi

	echo "ip=$ipaddr:$peeraddr:$gwaddr:$netmask:$hostname:$bootif:none"
    done < <(ip -6 address show dev "$iface" permanent scope global)

    kdump_ip6_routes "$iface" "$bootif"
}									   # }}}


#
# Filter out problematic sysctl settings
# Parameters:
#   1) root:     initrd temporary root
function kdump_filter_sysctl()						   # {{{
{
    local root="$1"

    local restoreopt=$( shopt -p nullglob )
    shopt -s nullglob

    for f in \
	"$root"/boot/sysctl.conf-* \
	"$root"/run/sysctl.d/*.conf \
	"$root"/etc/sysctl.d/*.conf \
	"$root"/usr/local/lib/sysctl.d/*.conf \
	"$root"/usr/lib/sysctl.d/*.conf \
	"$root"/lib/sysctl.d/*.conf \
	"$root"/etc/sysctl.conf
    do
	sed -i -e '/^[ \t]*vm\./d' "$f"
    done

    eval "$restoreopt"
}									   # }}}

#
# Low-level setup for an s390 network interface
# Parameters:
#   1) _root:   initrd temporary root
#   2) _iface:  current interface name
#   3) _bootif: interface name in initrd
function kdump_setup_zdev()						   # {{{
{
    local _root="$1"
    local _iface="$2"
    local _bootif="$3"
    case $(uname -i) in
	s390*) ;;
	*) return # early return if not s390
	   ;;
    esac
    local _tempfile=$(mktemp --tmpdir kdump-dracut-zdev.XXXXXX)
    chzdev --export "$_tempfile" --active --by-interface "$_iface" \
	   2>&1 | ddebug
    sed -i -e 's/^\[active /\[persistent /' "$_tempfile"
    ddebug < "$_tempfile"
    chzdev --import "$_tempfile" --persistent --base "/etc=${_root}/etc" \
           --yes --no-root-update --force 2>&1 | ddebug
    lszdev --configured --persistent --info --by-interface "$_iface" \
	   --base "/etc=${_root}/etc" 2>&1 | ddebug
    rm -f "$_tempfile"
}									   # }}}

#
# Set up name for a QETH network interface
# Parameters:
#   1) _root:   initrd temporary root
#   2) _iface:  current interface name
#   3) _bootif: interface name in initrd
function kdump_setup_qeth()						   # {{{
{
    local _root="$1"
    local _iface="$2"
    local _bootif="$3"
    local _dev=$( readlink "/sys/class/net/$_iface/device" )
    _dev="${_dev##*/}"
    local _layer2=$(</sys/class/net/$_iface/device/layer2)
    local _type=$(</sys/class/net/$_iface/type)
    local _dev_id _dev_id_match
    if [ "$_layer2" -ne 0 ]
    then
       _dev_id=""$(</sys/class/net/$_iface/dev_id)
       _dev_id_match=", ATTR{dev_id}==\"$_dev_id\""
    fi

    cat >"${_root}/etc/udev/rules.d/80-persistent-net-${_bootif}.rules" <<EOF
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="qeth"$_dev_id_match, KERNELS=="$_dev", ATTR{type}=="$_type", NAME="$_bootif"
EOF
}									   # }}}

#
# Set up hardware network interfaces
# Parameters:
#   1) _root:   initrd temporary root
# Input variables:
#   kdump_ifmap  hardware network interface map
function kdump_setup_hwif()						   # {{{
{
    local _root="$1"
    local _spec _iface _bootif _drv

    for _spec in $kdump_ifmap
    do
	_iface="${_spec%:*}"
	_bootif="${_spec##*:}"
	_drv=$( readlink "/sys/class/net/$_iface/device/driver" )
	kdump_setup_zdev "$_root" "$_iface" "$_bootif"
	case "$_drv" in
	    */qeth)
		kdump_setup_qeth "$_root" "$_iface" "$_bootif"
		;;
	esac
    done
}									   # }}}

